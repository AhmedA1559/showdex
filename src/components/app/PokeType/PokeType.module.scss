@use 'sass:map';
@use 'config/colors';
@use 'config/fonts';
@use 'functions/color';
@use 'mixins/font';
@use 'mixins/spacing';
@use 'mixins/transition';

$types: (
  // these are the default colors, not for a specific type
  // (in case a specific type's styling hasn't been applied for whatever reason)
  default-color: (
    light: colors.$black,
    dark: colors.$white,
  ),

  colors: (
    unknown: #424242, // aka. the ??? type
    normal: #90905D,
    fighting: #81201B,
    flying: #8563EA,
    poison: #7C317C,
    ground: #D1A42B,
    rock: #917E2C,
    bug: #808D18,
    ghost: #584578,
    steel: #9999BC,
    fire: #DD6510,
    water: #3A6EEB,
    grass: #549B31,
    electric: color.shade(#FDD835, 10%),
    psychic: color.shade(#F62765, 10%),
    ice: color.shade(#73CACA, 10%),
    dragon: #4D09F4,
    dark: #41332A,
    fairy: #E76D88,
  ),

  adjustment: (
    light: 10%, // shade (both highlight/non-highlight)
    dark: 50%, // tint (for non-highlight only)
  ),
);

$container: (
  width: (
    default: 36px,
    sm: 28px,
    xs: 22px,
  ),

  padding-y: 1px,
  font-size: 8px,
  border-radius: 5px,

  text-shadow: (
    default: 1px 1px 0 color.alpha(colors.$black, 0.1),
    highlight: 1px 1px 0 color.alpha(colors.$black, 0.3),
  ),

  label-opacity: (
    default: (
      light: 0.75,
      dark: 0.85,
    ),

    highlight: (
      light: 1,
      dark: 1,
    ),
  ),

  background-opacity: (
    // typically for the unknown/??? type
    default: (
      light: 0.075,
      dark: 0.1,
    ),

    highlight: (
      light: 0.85,
      dark: 0.5,
    ),
  ),
);

.container {
  display: inline-block;
  width: map.get($container, width, default);
  @include spacing.padding-xy($y: map.get($container, padding-y));
  @include font.apply(fonts.$mono);
  font-size: map.get($container, font-size);
  text-align: center;
  text-transform: uppercase;
  text-shadow: map.get($container, text-shadow, default);
  border-radius: map.get($container, border-radius);
  user-select: none;
  pointer-events: none;
  @include transition.apply(width, color, text-shadow, background-color);
}

.sm {
  width: map.get($container, width, sm);
}

.xs {
  width: map.get($container, width, xs);
}

.light {
  color: color.alpha(map.get($types, default-color, light), map.get($container, label-opacity, default, light));
  background-color: color.alpha(map.get($types, default-color, light), map.get($container, background-opacity, default, light));
}

.dark {
  color: color.alpha(map.get($types, default-color, dark), map.get($container, label-opacity, default, dark));
  background-color: color.alpha(map.get($types, default-color, dark), map.get($container, background-opacity, default, dark));
}

.highlight {
  text-shadow: map.get($container, text-shadow, highlight);

  &.light {
    color: color.alpha(colors.$white, map.get($container, label-opacity, highlight, light));
    background-color: color.alpha(map.get($types, colors, unknown), map.get($container, background-opacity, default, light));
  }

  &.dark {
    color: color.alpha(colors.$white, map.get($container, label-opacity, highlight, dark));
    background-color: color.alpha(map.get($types, colors, unknown), map.get($container, background-opacity, default, dark));
  }
}

@each $type, $color in map.get($types, colors) {
  @if $type != unknown {
    $light-color: color.shade($color, map.get($types, adjustment, light));
    $light-highlight-color: $light-color;
    $dark-color: color.tint($color, map.get($types, adjustment, dark));
    $dark-highlight-color: $color;

    .type-#{$type} {
      &:not(.highlight) {
        &.light {
          color: color.alpha($light-color, map.get($container, label-opacity, default, light));
        }

        &.dark {
          color: color.alpha($dark-color, map.get($container, label-opacity, default, dark));
        }
      }

      &.highlight {
        &.light {
          // color: color.alpha(colors.$white, map.get($container, label-opacity, highlight, light));
          background-color: color.alpha($light-highlight-color, map.get($container, background-opacity, highlight, light));
        }

        &.dark {
          // color: color.alpha(colors.$white, map.get($container, label-opacity, highlight, dark));
          background-color: color.alpha($dark-highlight-color, map.get($container, background-opacity, highlight, dark));
        }
      } // end .highlight
    } // end .type-#{$type}
  } // end @if
}
